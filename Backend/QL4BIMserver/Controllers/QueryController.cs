using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using QL4BIMinterpreter;
using System.Text.RegularExpressions;

namespace TodoApi.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class QueryController : ControllerBase
    {
        static string status = "%idle%";
        private readonly ILogger<QueryController> _logger;

        public QueryController(ILogger<QueryController> logger)
        {
            _logger = logger;
        }

        const string temp_query_file = "../queries/temp_query_file.txt";

        [HttpPost]
        public async Task<string> Post()
        {   
            status = "%processing%";

            var payload_str = "";
            using (var ms = new MemoryStream(2048))
            {
                await Request.Body.CopyToAsync(ms);
                payload_str = Encoding.ASCII.GetString(ms.ToArray());                
            }

            // linux path "/home/simon/Documents/dev/EIMC/Backend/QL4BIMserver/im2ql/main.py"
            var ql_code = run_cmd(@"C:\Users\simon.daum\Documents\03_Dev\EIMC\Backend\QL4BIMserver\im2ql\main.py", payload_str);
            string ql_code_pathfix = Regex.Replace(ql_code, @"ImportModel\(([^)]+)\)", "ImportModel(\"$1\")");
            System.IO.File.WriteAllText(temp_query_file, ql_code_pathfix);



            var report_id = QLinterpreter.inter_main(new []{temp_query_file});

            status = "%report_" + report_id;
            return "201";
        }

        public string run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            //linux start.FileName = "/home/simon/.local/share/virtualenvs/im2ql-FysY6N98/bin/python3";
            start.FileName = @"C:\Users\simon.daum\.virtualenvs\Backend-GniVr3vf\Scripts\python.exe";
            args = args.Replace("\"", "$");
            
            start.Arguments = string.Format("{0} \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }


        [HttpGet]
        public String Get()
        {   
            var status_c = status;
            if (status.StartsWith("%report_"))
                status = "%idle";
            return status_c;
        }
    }
}
